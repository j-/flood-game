{"version":3,"sources":["types.ts","store/actions.ts","color.ts","board.ts","store/index.ts","components/GameSVG.tsx","components/Game.tsx","components/App.tsx","index.tsx"],"names":["Color","isActionReset","action","type","isActionStartGame","startGame","seed","Date","now","toString","data","isActionFlood","isActionUndoMove","COLOR_ARRAY","RED","ORANGE","YELLOW","GREEN","BLUE","PURPLE","COLOR_MAP","Map","getRandomColor","rng","Math","random","i","floor","color","getFillColor","fillColor","get","Error","getBoardWidth","board","length","getBoardHeight","getBoardColor","x","y","setBoardColor","buildBoard","width","height","row","push","randomiseBoard","isAllOneColor","target","flood","replacement","copy","copyBoard","queue","shift","DEFAULT_STATE","lastBoard","moves","isGameOver","isGameWon","currentColor","reducer","state","seedrandom","newBoard","newMoves","getSeed","getMoves","getBoard","canUndoLastMove","GameSVG","onClick","boardWidth","boardHeight","WIDTH","HEIGHT","VIEWBOX","children","fill","key","SIZE","onTouchStart","className","viewBox","preserveAspectRatio","Game","dispatch","useDispatch","useSelector","gameOver","gameWon","enableUndo","handleClickUndo","React","e","preventDefault","handleClickReset","handleClickNewGame","handleClickColor","disabled","App","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e177ce7.chunk.js","sourcesContent":["export enum Color {\n  RED,\n  ORANGE,\n  YELLOW,\n  GREEN,\n  BLUE,\n  PURPLE,\n}\n\nexport type Board = Color[][]\n","import { Action } from 'redux';\nimport { Color } from '../types';\n\n/* Reset action */\n\nexport const ACTION_RESET = 'RESET';\n\nexport interface ActionReset extends Action<typeof ACTION_RESET> { }\n\nexport const isActionReset = (action: Action): action is ActionReset => (\n  action.type === ACTION_RESET\n);\n\nexport const reset = (): ActionReset => ({\n  type: ACTION_RESET,\n});\n\n/* Start game action */\n\nexport const ACTION_START_GAME = 'START_GAME';\n\nexport interface ActionStartGame extends Action<typeof ACTION_START_GAME> {\n  data: {\n    seed: string;\n  };\n}\n\nexport const isActionStartGame = (action: Action): action is ActionStartGame => (\n  action.type === ACTION_START_GAME\n);\n\nexport const startGame = (seed = Date.now().toString()): ActionStartGame => ({\n  type: ACTION_START_GAME,\n  data: {\n    seed,\n  },\n});\n\n/* Flood action */\n\nexport const ACTION_FLOOD = 'FLOOD';\n\nexport interface ActionFlood extends Action<typeof ACTION_FLOOD> {\n  data: {\n    color: Color;\n  };\n}\n\nexport const isActionFlood = (action: Action): action is ActionFlood => (\n  action.type === ACTION_FLOOD\n);\n\nexport const flood = (color: Color): ActionFlood => ({\n  type: ACTION_FLOOD,\n  data: {\n    color,\n  },\n});\n\n/* Undo move action */\n\nexport const ACTION_UNDO_MOVE = 'UNDO_MOVE';\n\nexport interface ActionUndoMove extends Action<typeof ACTION_UNDO_MOVE> { }\n\nexport const isActionUndoMove = (action: Action): action is ActionUndoMove => (\n  action.type === ACTION_UNDO_MOVE\n);\n\nexport const undoMove = (): ActionUndoMove => ({\n  type: ACTION_UNDO_MOVE,\n});\n","import { Color } from './types';\n\nexport const COLOR_COUNT = 6;\n\nexport const COLOR_ARRAY = [\n  Color.RED,\n  Color.ORANGE,\n  Color.YELLOW,\n  Color.GREEN,\n  Color.BLUE,\n  Color.PURPLE,\n];\n\nexport const COLOR_MAP = new Map([\n  [Color.RED,    'hsl(0, 80%, 60%)'],\n  [Color.ORANGE, 'hsl(60, 80%, 60%)'],\n  [Color.YELLOW, 'hsl(120, 80%, 60%)'],\n  [Color.GREEN,  'hsl(180, 80%, 60%)'],\n  [Color.BLUE,   'hsl(240, 80%, 60%)'],\n  [Color.PURPLE, 'hsl(300, 80%, 60%)'],\n]);\n\nexport const getRandomColor = (rng = Math.random): Color => {\n  const i = Math.floor(rng() * COLOR_COUNT);\n  const color = COLOR_ARRAY[i];\n  return color;\n};\n\nexport const getFillColor = (color: Color): string => {\n  const fillColor = COLOR_MAP.get(color);\n  if (!fillColor) {\n    throw new Error('Unrecognised color');\n  }\n  return fillColor;\n};\n","import { Board, Color } from './types';\nimport { getRandomColor } from './color';\n\nexport const getBoardWidth = (board: Board): number => board[0].length;\nexport const getBoardHeight = (board: Board): number => board.length;\nexport const getBoardColor = (board: Board, x: number, y: number): Color => board[y][x];\nexport const setBoardColor = (board: Board, x: number, y: number, color: Color): void => { board[y][x] = color; };\n\nexport const buildBoard = (width: number, height: number): Board => {\n  const board = [];\n  for (let y = 0; y < height; y++) {\n    const row = [];\n    for (let x = 0; x < width; x++) {\n      row.push(0);\n    }\n    board.push(row);\n  }\n  return board;\n};\n\nexport const copyBoard = (board: Board): Board => {\n  const copy: Board = [];\n  const height = getBoardHeight(board);\n  for (let y = 0; y < height; y++) {\n    copy.push([...board[y]]);\n  }\n  return copy;\n};\n\nexport const randomiseBoard = (board: Board, rng = Math.random): void => {\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const color = getRandomColor(rng);\n      setBoardColor(board, x, y, color);\n    }\n  }\n};\n\nexport const isAllOneColor = (board: Board): boolean => {\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  const target = getBoardColor(board, 0, 0);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const color = getBoardColor(board, x, y);\n      if (color !== target) return false;\n    }\n  }\n  return true;\n};\n\n/**\n@see https://en.wikipedia.org/wiki/Flood_fill#Alternative_implementations\n\nFlood-fill (node, target-color, replacement-color):\n  1. If target-color is equal to replacement-color, return.\n  2. If color of node is not equal to target-color, return.\n  3. Set the color of node to replacement-color.\n  4. Set Q to the empty queue.\n  5. Add node to the end of Q.\n  6. While Q is not empty:\n  7.     Set n equal to the first element of Q.\n  8.     Remove first element from Q.\n  9.     If the color of the node to the west of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 10.     If the color of the node to the east of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 11.     If the color of the node to the north of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 12.     If the color of the node to the south of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 13. Continue looping until Q is exhausted.\n 14. Return.\n*/\nexport const flood = (board: Board, replacement: Color): Board => {\n  const copy = copyBoard(board);\n  const target = getBoardColor(board, 0, 0);\n  if (target === replacement) return copy;\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  const queue = [[0, 0]];\n  setBoardColor(copy, 0, 0, replacement);\n  while (queue.length) {\n    const [x, y] = queue.shift() as [number, number];\n    // East\n    if (x + 1 < width) {\n      const color = getBoardColor(copy, x + 1, y);\n      if (color === target) {\n        setBoardColor(copy, x + 1, y, replacement);\n        queue.push([x + 1, y]);\n      }\n    }\n    // South\n    if (y + 1 < height) {\n      const color = getBoardColor(copy, x, y + 1);\n      if (color === target) {\n        setBoardColor(copy, x, y + 1, replacement);\n        queue.push([x, y + 1]);\n      }\n    }\n    // West\n    if (x > 0) {\n      const color = getBoardColor(copy, x - 1, y);\n      if (color === target) {\n        setBoardColor(copy, x - 1, y, replacement);\n        queue.push([x - 1, y]);\n      }\n    }\n    // North\n    if (y > 0) {\n      const color = getBoardColor(copy, x, y - 1);\n      if (color === target) {\n        setBoardColor(copy, x, y - 1, replacement);\n        queue.push([x, y - 1]);\n      }\n    }\n  }\n  return copy;\n};\n","import { Reducer } from 'redux';\nimport seedrandom from 'seedrandom';\nimport { isActionReset, isActionStartGame, isActionFlood, isActionUndoMove } from './actions';\nimport { Board, Color } from '../types';\nimport { buildBoard, randomiseBoard, getBoardColor, flood, isAllOneColor } from '../board';\n\nexport interface RootReducerState {\n  seed: string;\n  board: Board | null;\n  lastBoard: Board | null;\n  moves: number;\n  isGameOver: boolean;\n  isGameWon: boolean;\n  currentColor: Color | null;\n}\n\nexport const DEFAULT_STATE: RootReducerState = {\n  seed: '',\n  lastBoard: null,\n  board: null,\n  moves: 0,\n  isGameOver: false,\n  isGameWon: false,\n  currentColor: null,\n};\n\nexport const reducer: Reducer<RootReducerState> = (state = DEFAULT_STATE, action) => {\n  if (isActionReset(action)) {\n    return DEFAULT_STATE;\n  }\n\n  if (isActionStartGame(action)) {\n    const { seed } = action.data;\n    const board = buildBoard(14, 14);\n    randomiseBoard(board, seedrandom(seed));\n    const currentColor = getBoardColor(board, 0, 0);\n    return {\n      seed,\n      board,\n      currentColor,\n      lastBoard: null,\n      moves: 0,\n      isGameOver: false,\n      isGameWon: false,\n    };\n  }\n\n  if (isActionFlood(action)) {\n    const { color } = action.data;\n    let { board, moves, isGameOver, isGameWon, currentColor } = state;\n    // Game must have started\n    if (!board) return state;\n    // Game cannot be over\n    if (isGameOver) return state;\n    // Must choose a new color\n    if (currentColor === color) return state;\n    const newBoard = flood(board, color);\n    const newMoves = moves + 1;\n    if (isAllOneColor(newBoard)) {\n      isGameOver = true;\n      isGameWon = true;\n      board = null;\n    } else if (newMoves >= 25) {\n      isGameOver = true;\n    }\n    return {\n      ...state,\n      lastBoard: board,\n      board: newBoard,\n      moves: newMoves,\n      currentColor: color,\n      isGameOver,\n      isGameWon,\n    };\n  }\n\n  if (isActionUndoMove(action)) {\n    const { lastBoard, moves } = state;\n    if (!lastBoard) return state;\n    return {\n      ...state,\n      lastBoard: null,\n      board: lastBoard,\n      moves: moves - 1,\n      currentColor: getBoardColor(lastBoard, 0, 0),\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;\n\nexport const getSeed = (state: RootReducerState) => state.seed;\nexport const getMoves = (state: RootReducerState) => state.moves;\nexport const getBoard = (state: RootReducerState) => state.board;\nexport const isGameOver = (state: RootReducerState) => state.isGameOver;\nexport const isGameWon = (state: RootReducerState) => state.isGameWon;\nexport const getCurrentColor = (state: RootReducerState) => state.currentColor;\nexport const canUndoLastMove = (state: RootReducerState) => state.lastBoard !== null;\n","import * as React from 'react';\nimport { Board, Color } from '../types';\nimport { getBoardWidth, getBoardHeight, getBoardColor } from '../board';\nimport { getFillColor } from '../color';\nimport './GameSVG.css';\n\nexport interface Props {\n  board: Board;\n  onClick: (color: Color) => void;\n}\n\nconst GameSVG: React.FC<Props> = ({ board, onClick }) => {\n  const SIZE = 35;\n  const boardWidth = getBoardWidth(board);\n  const boardHeight = getBoardHeight(board);\n  const WIDTH = boardWidth * SIZE;\n  const HEIGHT = boardHeight * SIZE;\n  const VIEWBOX = `0 0 ${WIDTH} ${HEIGHT}`;\n  const children = [];\n\n  for (let y = 0; y < boardHeight; y++) {\n    for (let x = 0; x < boardWidth; x++) {\n      const color = getBoardColor(board, x, y);\n      const fill = getFillColor(color);\n      children.push(\n        <rect\n          key={x + ',' + y}\n          x={x * SIZE - 0.5}\n          y={y * SIZE - 0.5}\n          width={SIZE + 1}\n          height={SIZE + 1}\n          fill={fill}\n          onClick={() => onClick(color)}\n          onTouchStart={() => onClick(color)}\n        />\n      );\n    }\n  }\n\n  return (\n    <svg\n      className=\"GameSVG\"\n      width={WIDTH}\n      height={HEIGHT}\n      viewBox={VIEWBOX}\n      preserveAspectRatio=\"none\"\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport default GameSVG;\n","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Color } from '../types';\nimport { getSeed, getBoard, getMoves, isGameOver, isGameWon, canUndoLastMove } from '../store';\nimport { startGame, flood, undoMove } from '../store/actions';\nimport GameSVG from './GameSVG';\nimport './Game.css';\n\nconst Game: React.FC = () => {\n  const dispatch = useDispatch();\n  const seed = useSelector(getSeed);\n  const board = useSelector(getBoard);\n  const moves = useSelector(getMoves);\n  const gameOver = useSelector(isGameOver);\n  const gameWon = useSelector(isGameWon);\n  const enableUndo = useSelector(canUndoLastMove);\n\n  const handleClickUndo = React.useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(undoMove());\n  }, [dispatch]);\n\n  const handleClickReset = React.useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(startGame(seed));\n  }, [dispatch, seed]);\n\n  const handleClickNewGame = React.useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(startGame());\n  }, [dispatch]);\n\n  const handleClickColor = React.useCallback((color: Color) => {\n    dispatch(flood(color));\n  }, [dispatch]);\n\n  if (!board) return null;\n\n  return (\n    <div className=\"Game\">\n      <nav className=\"navbar navbar-light bg-light\">\n        <button\n          className=\"btn btn-dark mr-auto\"\n          type=\"button\"\n          onClick={handleClickNewGame}\n        >\n          New game\n        </button>\n        <button\n          className=\"btn btn-light ml-1\"\n          type=\"button\"\n          disabled={!enableUndo}\n          onClick={handleClickUndo}\n        >\n          Undo move\n        </button>\n        <button\n          className=\"btn btn-light ml-1\"\n          type=\"button\"\n          onClick={handleClickReset}\n        >\n          Restart\n        </button>\n      </nav>\n      <div className=\"d-flex align-items-center mt-4 mb-4\">\n        <GameSVG\n          board={board}\n          onClick={handleClickColor}\n        />\n      </div>\n      <div className=\"d-flex flex-column align-items-center\">\n        <span className=\"display-4\">{moves} / 25</span>\n        {gameOver && <strong className=\"mr-3\">Game over</strong>}\n        {gameWon && <strong className=\"mr-3\">You win</strong>}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import * as React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nconst App: React.FC = () => (\n  <div className=\"App container pt-5 pb-5\">\n    <Game />\n  </div>\n);\n\nexport default App;\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles.css';\nimport { startGame } from './store/actions';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nstore.dispatch(startGame());\n\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}