{"version":3,"sources":["types.ts","store/actions.ts","color.ts","board.ts","store/index.ts","seed.ts","components/Grid.tsx","components/ColorButtons.tsx","components/Game.tsx","components/App.tsx","index.tsx"],"names":["Color","ACTION_RESET","isActionReset","action","type","ACTION_START_GAME","isActionStartGame","startGame","seed","Date","now","toString","data","ACTION_FLOOD","isActionFlood","flood","color","ACTION_UNDO_MOVE","isActionUndoMove","COLOR_ARRAY","RED","ORANGE","YELLOW","GREEN","BLUE","PURPLE","getRandomColor","rng","Math","random","i","floor","getBoardWidth","board","length","getBoardHeight","getBoardColor","x","y","setBoardColor","buildBoard","width","height","row","push","randomiseBoard","isAllOneColor","target","replacement","copy","copyBoard","queue","shift","DEFAULT_STATE","lastBoard","moves","isGameOver","isGameWon","currentColor","reducer","state","seedrandom","newBoard","newMoveCount","slice","getSeed","getMoveCount","getBoard","canUndoLastMove","DATE_FORMAT","Grid","onClick","size","WIDTH","HEIGHT","VIEWBOX","children","handleClick","useCallback","e","Number","currentTarget","dataset","distance","sqrt","onTouchStart","style","data-x","data-y","data-color","className","viewBox","preserveAspectRatio","ColorButtons","dispatch","useDispatch","handleClickColor","parseInt","value","title","Game","useSelector","gameOver","gameWon","enableUndo","handleClickUndo","preventDefault","dataLayer","event","handleClickReset","handleClickNewGame","handleClickTodaysGame","format","getTodaysSeed","disabled","App","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b7c5620.chunk.js","sourcesContent":["export enum Color {\n  RED,\n  ORANGE,\n  YELLOW,\n  GREEN,\n  BLUE,\n  PURPLE,\n}\n\nexport type Board = Color[][]\n","import { Action } from 'redux';\nimport { Color } from '../types';\n\n/* Reset action */\n\nexport const ACTION_RESET = 'RESET';\n\nexport interface ActionReset extends Action<typeof ACTION_RESET> { }\n\nexport const isActionReset = (action: Action): action is ActionReset => (\n  action.type === ACTION_RESET\n);\n\nexport const reset = (): ActionReset => ({\n  type: ACTION_RESET,\n});\n\n/* Start game action */\n\nexport const ACTION_START_GAME = 'START_GAME';\n\nexport interface ActionStartGame extends Action<typeof ACTION_START_GAME> {\n  data: {\n    seed: string;\n  };\n}\n\nexport const isActionStartGame = (action: Action): action is ActionStartGame => (\n  action.type === ACTION_START_GAME\n);\n\nexport const startGame = (seed = Date.now().toString()): ActionStartGame => ({\n  type: ACTION_START_GAME,\n  data: {\n    seed,\n  },\n});\n\n/* Flood action */\n\nexport const ACTION_FLOOD = 'FLOOD';\n\nexport interface ActionFlood extends Action<typeof ACTION_FLOOD> {\n  data: {\n    color: Color;\n  };\n}\n\nexport const isActionFlood = (action: Action): action is ActionFlood => (\n  action.type === ACTION_FLOOD\n);\n\nexport const flood = (color: Color): ActionFlood => ({\n  type: ACTION_FLOOD,\n  data: {\n    color,\n  },\n});\n\n/* Undo move action */\n\nexport const ACTION_UNDO_MOVE = 'UNDO_MOVE';\n\nexport interface ActionUndoMove extends Action<typeof ACTION_UNDO_MOVE> { }\n\nexport const isActionUndoMove = (action: Action): action is ActionUndoMove => (\n  action.type === ACTION_UNDO_MOVE\n);\n\nexport const undoMove = (): ActionUndoMove => ({\n  type: ACTION_UNDO_MOVE,\n});\n","import { Color } from './types';\n\nexport const COLOR_COUNT = 6;\n\nexport const COLOR_ARRAY = [\n  Color.RED,\n  Color.ORANGE,\n  Color.YELLOW,\n  Color.GREEN,\n  Color.BLUE,\n  Color.PURPLE,\n];\n\nexport const getRandomColor = (rng = Math.random): Color => {\n  const i = Math.floor(rng() * COLOR_COUNT);\n  const color = COLOR_ARRAY[i];\n  return color;\n};\n","import { Board, Color } from './types';\nimport { getRandomColor } from './color';\n\nexport const getBoardWidth = (board: Board): number => board[0].length;\nexport const getBoardHeight = (board: Board): number => board.length;\nexport const getBoardColor = (board: Board, x: number, y: number): Color => board[y][x];\nexport const setBoardColor = (board: Board, x: number, y: number, color: Color): void => { board[y][x] = color; };\n\nexport const buildBoard = (width: number, height: number): Board => {\n  const board = [];\n  for (let y = 0; y < height; y++) {\n    const row = [];\n    for (let x = 0; x < width; x++) {\n      row.push(0);\n    }\n    board.push(row);\n  }\n  return board;\n};\n\nexport const copyBoard = (board: Board): Board => {\n  const copy: Board = [];\n  const height = getBoardHeight(board);\n  for (let y = 0; y < height; y++) {\n    copy.push([...board[y]]);\n  }\n  return copy;\n};\n\nexport const randomiseBoard = (board: Board, rng = Math.random): void => {\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const color = getRandomColor(rng);\n      setBoardColor(board, x, y, color);\n    }\n  }\n};\n\nexport const isAllOneColor = (board: Board): boolean => {\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  const target = getBoardColor(board, 0, 0);\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const color = getBoardColor(board, x, y);\n      if (color !== target) return false;\n    }\n  }\n  return true;\n};\n\n/**\n@see https://en.wikipedia.org/wiki/Flood_fill#Alternative_implementations\n\nFlood-fill (node, target-color, replacement-color):\n  1. If target-color is equal to replacement-color, return.\n  2. If color of node is not equal to target-color, return.\n  3. Set the color of node to replacement-color.\n  4. Set Q to the empty queue.\n  5. Add node to the end of Q.\n  6. While Q is not empty:\n  7.     Set n equal to the first element of Q.\n  8.     Remove first element from Q.\n  9.     If the color of the node to the west of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 10.     If the color of the node to the east of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 11.     If the color of the node to the north of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 12.     If the color of the node to the south of n is target-color,\n             set the color of that node to replacement-color and add that node to the end of Q.\n 13. Continue looping until Q is exhausted.\n 14. Return.\n*/\nexport const flood = (board: Board, replacement: Color): Board => {\n  const copy = copyBoard(board);\n  const target = getBoardColor(board, 0, 0);\n  if (target === replacement) return copy;\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  const queue = [[0, 0]];\n  setBoardColor(copy, 0, 0, replacement);\n  while (queue.length) {\n    const [x, y] = queue.shift() as [number, number];\n    // East\n    if (x + 1 < width) {\n      const color = getBoardColor(copy, x + 1, y);\n      if (color === target) {\n        setBoardColor(copy, x + 1, y, replacement);\n        queue.push([x + 1, y]);\n      }\n    }\n    // South\n    if (y + 1 < height) {\n      const color = getBoardColor(copy, x, y + 1);\n      if (color === target) {\n        setBoardColor(copy, x, y + 1, replacement);\n        queue.push([x, y + 1]);\n      }\n    }\n    // West\n    if (x > 0) {\n      const color = getBoardColor(copy, x - 1, y);\n      if (color === target) {\n        setBoardColor(copy, x - 1, y, replacement);\n        queue.push([x - 1, y]);\n      }\n    }\n    // North\n    if (y > 0) {\n      const color = getBoardColor(copy, x, y - 1);\n      if (color === target) {\n        setBoardColor(copy, x, y - 1, replacement);\n        queue.push([x, y - 1]);\n      }\n    }\n  }\n  return copy;\n};\n","import { Reducer } from 'redux';\nimport seedrandom from 'seedrandom';\nimport { isActionReset, isActionStartGame, isActionFlood, isActionUndoMove } from './actions';\nimport { Board, Color } from '../types';\nimport { buildBoard, randomiseBoard, getBoardColor, flood, isAllOneColor } from '../board';\n\nexport interface RootReducerState {\n  seed: string;\n  board: Board | null;\n  lastBoard: Board | null;\n  moves: Color[];\n  isGameOver: boolean;\n  isGameWon: boolean;\n  currentColor: Color | null;\n}\n\nexport const DEFAULT_STATE: RootReducerState = {\n  seed: '',\n  lastBoard: null,\n  board: null,\n  moves: [],\n  isGameOver: false,\n  isGameWon: false,\n  currentColor: null,\n};\n\nexport const reducer: Reducer<RootReducerState> = (state = DEFAULT_STATE, action) => {\n  if (isActionReset(action)) {\n    return DEFAULT_STATE;\n  }\n\n  if (isActionStartGame(action)) {\n    const { seed } = action.data;\n    const board = buildBoard(14, 14);\n    randomiseBoard(board, seedrandom(seed));\n    const currentColor = getBoardColor(board, 0, 0);\n    return {\n      seed,\n      board,\n      currentColor,\n      lastBoard: null,\n      moves: [],\n      isGameOver: false,\n      isGameWon: false,\n    };\n  }\n\n  if (isActionFlood(action)) {\n    const { color } = action.data;\n    let { board, moves, isGameOver, isGameWon, currentColor } = state;\n    // Game must have started\n    if (!board) return state;\n    // Game cannot be over\n    if (isGameOver) return state;\n    // Must choose a new color\n    if (currentColor === color) return state;\n    const newBoard = flood(board, color);\n    const newMoveCount = moves.length + 1;\n    if (isAllOneColor(newBoard)) {\n      isGameOver = true;\n      isGameWon = true;\n      board = null;\n    } else if (newMoveCount >= 25) {\n      isGameOver = true;\n    }\n    return {\n      ...state,\n      lastBoard: board,\n      board: newBoard,\n      moves: newMoveCount === moves.length ? moves : [...moves, color],\n      currentColor: color,\n      isGameOver,\n      isGameWon,\n    };\n  }\n\n  if (isActionUndoMove(action)) {\n    const { lastBoard, moves } = state;\n    if (!lastBoard) return state;\n    return {\n      ...state,\n      lastBoard: null,\n      board: lastBoard,\n      moves: moves.slice(0, -1),\n      currentColor: getBoardColor(lastBoard, 0, 0),\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;\n\nexport const getSeed = (state: RootReducerState): string => state.seed;\nexport const getMoveCount = (state: RootReducerState): number => state.moves.length;\nexport const getBoard = (state: RootReducerState): Board | null => state.board;\nexport const isGameOver = (state: RootReducerState): boolean => state.isGameOver;\nexport const isGameWon = (state: RootReducerState): boolean => state.isGameWon;\nexport const getCurrentColor = (state: RootReducerState): Color | null => state.currentColor;\nexport const canUndoLastMove = (state: RootReducerState): boolean => state.lastBoard !== null;\n","import format from 'date-fns/format/index';\n\nexport const DATE_FORMAT = 'yyyy-MM-dd';\n\nexport const getTodaysSeed = (now = Date.now()): string => (\n  format(now, DATE_FORMAT)\n);\n","import React, { useCallback } from 'react';\nimport { getBoardColor, getBoardHeight, getBoardWidth } from '../board';\nimport { Board, Color } from '../types';\nimport './Grid.css';\n\nexport interface Props {\n  board: Board;\n  onClick: (color: Color) => void;\n}\n\ninterface CustomCSSProperties extends React.CSSProperties {\n  '--distance': number;\n}\n\nconst SIZE = 35;\n\nconst Grid: React.FC<Props> = ({ board, onClick }) => {\n  const size = SIZE;\n  const width = getBoardWidth(board);\n  const height = getBoardHeight(board);\n  const WIDTH = width * size;\n  const HEIGHT = height * size;\n  const VIEWBOX = `0 0 ${WIDTH} ${HEIGHT}`;\n  const children: React.ReactChild[] = [];\n\n  const handleClick = useCallback<React.ReactEventHandler<SVGRectElement>>((e) => {\n    const x = Number(e.currentTarget.dataset.x);\n    const y = Number(e.currentTarget.dataset.y);\n    onClick(getBoardColor(board, x, y));\n  }, [board, onClick]);\n\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const distance = Math.sqrt(x ** 2 + y ** 2);\n      children.push(\n        <rect\n          key={x + ',' + y}\n          x={x * size - 0.5}\n          y={y * size - 0.5}\n          width={size + 1}\n          height={size + 1}\n          onClick={handleClick}\n          onTouchStart={handleClick}\n          style={{ '--distance': distance } as CustomCSSProperties}\n          data-x={x}\n          data-y={y}\n          data-color={getBoardColor(board, x, y)}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"Grid d-flex align-items-center\">\n      <svg\n        className=\"Grid-svg\"\n        width={WIDTH}\n        height={HEIGHT}\n        viewBox={VIEWBOX}\n        preserveAspectRatio=\"none\"\n      >\n        {children}\n      </svg>\n    </div>\n  );\n};\n\nexport default Grid;\n","import React, { MouseEventHandler, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { flood } from '../store/actions';\nimport { Color } from '../types';\nimport './ColorButtons.css';\n\nconst ColorButtons: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const handleClickColor = useCallback<MouseEventHandler<HTMLButtonElement>>((e) => {\n    const color = parseInt(e.currentTarget.value, 10);\n    dispatch(flood(color));\n  }, [dispatch]);\n\n  return (\n    <div className=\"ColorButtons d-flex justify-content-between\">\n      <button\n        className=\"ColorButtons-button btn\"\n        type=\"button\"\n        value={Color.RED}\n        onClick={handleClickColor}\n        title=\"Flood with red\"\n      >\n        <span className=\"sr-only\">Red</span>\n      </button>\n      <button\n        className=\"ColorButtons-button btn\"\n        type=\"button\"\n        value={Color.ORANGE}\n        onClick={handleClickColor}\n        title=\"Flood with orange\"\n      >\n        <span className=\"sr-only\">Orange</span>\n      </button>\n      <button\n        className=\"ColorButtons-button btn\"\n        type=\"button\"\n        value={Color.YELLOW}\n        onClick={handleClickColor}\n        title=\"Flood with yellow\"\n      >\n        <span className=\"sr-only\">Yellow</span>\n      </button>\n      <button\n        className=\"ColorButtons-button btn\"\n        type=\"button\"\n        value={Color.GREEN}\n        onClick={handleClickColor}\n        title=\"Flood with green\"\n      >\n        <span className=\"sr-only\">Green</span>\n      </button>\n      <button\n        className=\"ColorButtons-button btn\"\n        type=\"button\"\n        value={Color.BLUE}\n        onClick={handleClickColor}\n        title=\"Flood with blue\"\n      >\n        <span className=\"sr-only\">Blue</span>\n      </button>\n      <button\n        className=\"ColorButtons-button btn\"\n        type=\"button\"\n        value={Color.PURPLE}\n        onClick={handleClickColor}\n        title=\"Flood with purple\"\n      >\n        <span className=\"sr-only\">Purple</span>\n      </button>\n    </div>\n  );\n};\n\nexport default ColorButtons;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Color } from '../types';\nimport { getTodaysSeed } from '../seed';\nimport { getSeed, getBoard, getMoveCount, isGameOver, isGameWon, canUndoLastMove } from '../store';\nimport { startGame, flood, undoMove } from '../store/actions';\nimport Grid from './Grid';\nimport ColorButtons from './ColorButtons';\nimport './Game.css';\n\nconst Game: React.FC = () => {\n  const dispatch = useDispatch();\n  const seed = useSelector(getSeed);\n  const board = useSelector(getBoard);\n  const moves = useSelector(getMoveCount);\n  const gameOver = useSelector(isGameOver);\n  const gameWon = useSelector(isGameWon);\n  const enableUndo = useSelector(canUndoLastMove);\n\n  const handleClickUndo = useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(undoMove());\n    dataLayer.push({ event: 'undo_move' });\n  }, [dispatch]);\n\n  const handleClickReset = useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(startGame(seed));\n    dataLayer.push({ event: 'restart_game' });\n  }, [dispatch, seed]);\n\n  const handleClickNewGame = useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    dispatch(startGame());\n    dataLayer.push({ event: 'new_game' });\n  }, [dispatch]);\n\n  const handleClickTodaysGame = useCallback<React.MouseEventHandler>((e) => {\n    e.preventDefault();\n    const seed = getTodaysSeed();\n    dispatch(startGame(seed));\n    dataLayer.push({ event: 'todays_game' });\n  }, [dispatch]);\n\n  const handleClickColor = useCallback((color: Color) => {\n    dispatch(flood(color));\n    dataLayer.push({ event: 'game_move' });\n  }, [dispatch]);\n\n  if (!board) return null;\n\n  return (\n    <div className=\"Game\">\n      <nav className=\"navbar navbar-light bg-light\">\n        <button\n          className=\"btn btn-dark mr-1 my-2\"\n          type=\"button\"\n          onClick={handleClickNewGame}\n        >\n          New game\n        </button>\n        <button\n          className=\"btn btn-light mr-auto my-2\"\n          type=\"button\"\n          onClick={handleClickTodaysGame}\n        >\n          Today's game\n        </button>\n        <button\n          className=\"btn btn-light ml-auto my-2\"\n          type=\"button\"\n          disabled={!enableUndo}\n          onClick={handleClickUndo}\n        >\n          Undo move\n        </button>\n        <button\n          className=\"btn btn-light ml-1 my-2\"\n          type=\"button\"\n          onClick={handleClickReset}\n        >\n          Restart\n        </button>\n      </nav>\n      <div className=\"mt-4 mb-4\">\n        <Grid\n          board={board}\n          onClick={handleClickColor}\n        />\n      </div>\n      <div className=\"mt-4 mb-4\">\n        <ColorButtons />\n      </div>\n      <div className=\"mt-4 mb-4 d-flex flex-column align-items-center\">\n        <span className=\"display-4\">{moves} / 25</span>\n        {gameOver && <strong className=\"mr-3\">Game over</strong>}\n        {gameWon && <strong className=\"mr-3\">You win</strong>}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nconst App: React.FC = () => (\n  <div className=\"App container pt-5 pb-5 mb-5\">\n    <Game />\n\n    <div className=\"mt-5 mb-5 text-center\">\n      <h2>How to play</h2>\n      <p>Tap colors to flood-fill the board from the top left corner. The goal is to make the whole board a single color within 25 moves.</p>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles.css';\nimport { startGame } from './store/actions';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nstore.dispatch(startGame());\n\nrender(\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}